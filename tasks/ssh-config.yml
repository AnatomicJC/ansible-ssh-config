---
- name: AuthorizedKeysCommand variables checks
  fail:
    msg="You must define AuthorizedKeysCommand variables"
  when: >
    ssh_config_authorized_keys_command|bool
    and ('%s'|format(ssh_config_sshauth_login)|length == 0
    or '%s'|format(ssh_config_sshauth_passwd)|length == 0
    or '%s'|format(ssh_config_sshauth_fqdn)|length == 0)

- import_tasks: totp.yml
  when: ssh_config_totp_enabled|bool

- name: Copy sshauth script
  template:
    src: "etc/ssh/sshauth.j2"
    dest: "/etc/ssh/sshauth"
    owner: "root"
    group: "root"
    mode: "0700"
  when: ssh_config_authorized_keys_command|bool

- name: Install required packages
  # on some servers diag-clinical servers like BR-CDG-1001
  # we need to downgrade ssh to the 6.6 version. we put a preferences
  # file with 1001 as pin preference, this 1001 value is don't
  # take into account by ansible apt module.
  # So we use shell module
  #shell: apt-get install -y --force-yes ssh curl
  apt:
    name:
    - ssh
    - curl
    - sudo
    state: "present"

- name: Create /etc/ssh/keys folder
  file:
    dest: "/etc/ssh/keys"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Create users
  user:
    name: "{{ item.user }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default('no') }}"
    ssh_key_bits: "{{ item.ssh_key_bits | default('4096') }}"
    ssh_key_type: "{{ item.ssh_key_type | default('ed25519') }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    password: "{{ item.password | default('*') }}"
  with_items: "{{ ssh_config_pubkeys }}"

- name: Give admin users full sudoers rights
  template:
    src: etc/sudoers.d/superuser.j2
    dest: /etc/sudoers.d/superuser
    validate: 'visudo -cf %s'
    mode: 0440

- name: Create SFTP folders
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ ssh_config_sftp_folders }}"

- name: Push public keys
  copy:
    dest: "{{ item.keyfile | default('/etc/ssh/keys/authorized_keys.' + item.user) }}"
    content: "{{ item.pubkey }}"
  with_items: "{{ ssh_config_pubkeys }}"
  tags: ssh-config-push-keys

- name: Check if ssh_host_ed25519_key SSH key exists
  stat:
    path: '/etc/ssh/ssh_host_ed25519_key'
  register: ed25519_key

- name: Create /etc/ssh/ssh_host_ed25519_key SSH key
  command: "ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''"
  when: not ed25519_key.stat.exists|bool

- name: Secure /etc/ssh/moduli file
  shell: |
    awk '$5 > 3071' /etc/ssh/moduli > /etc/ssh/moduli.tmp
    mv /etc/ssh/moduli.tmp /etc/ssh/moduli
  changed_when: False

- name: Backup sshd_config file
  command: cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
  changed_when: False

- name: Push sshd_config file
  template:
    src: "etc/ssh/sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
    owner: "root"
    group: "root"
    mode: "0644"
  register: sshd_config
  notify:
    - restart ssh

- name: Check if SSH config is ok
  command: sshd -t
  register: ssh_check_config
  changed_when: False
  failed_when: False

- debug:
    msg: "{{ ssh_check_config }}"
  when: ssh_check_config.rc > 0

- name: Restore sshd_config file
  command: "{{ item }}"
  changed_when: False
  with_items:
    - cp /etc/ssh/sshd_config /etc/ssh/sshd_config.faulty
    - cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
  when: ssh_check_config.rc > 0

- name: Check is ssh configuration has failed
  fail:
    msg: "Set SSH config has failed, sshd_config file has been restored"
  when: ssh_check_config.rc > 0
